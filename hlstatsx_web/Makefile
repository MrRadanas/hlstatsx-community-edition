PROJECT_NAME=$(shell basename "$(PWD)")
PROJECT_DIR=$(shell pwd)
DOCKER_COMPOSE=$(shell which docker-compose)
DOCKER=$(shell which docker)

PHP_CONTAINER_NAME=hlstats_web_symfony
CONTAINER_EXEC=${DOCKER_COMPOSE} exec ${PHP_CONTAINER_NAME}
COMPOSER_EXEC=${CONTAINER_EXEC} composer
CONSOLE_EXEC=${CONTAINER_EXEC} bin/console

# Colors
G=\033[32m
Y=\033[33m
NC=\033[0m

##
## Help
## ----------------------
help: ## List of all commands
	@grep -E '(^[a-zA-Z_0-9-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
	| awk 'BEGIN {FS = ":.*?## "}; {printf "${G}%-24s${NC} %s\n", $$1, $$2}' \
	| sed -e 's/\[32m## /[33m/' && printf "\n"; \
	printf "Project: ${Y}${PROJECT_NAME}${NC}\n"; \
	printf "Project directory: ${Y}${PROJECT_DIR}${NC}\n"; \
	printf "PHP: ${Y}${CONTAINER_EXEC} php${NC}\n"; \
	printf "PHP Composer: ${Y}${COMPOSER_EXEC}${NC}\n\n";

.DEFAULT_GOAL := help
.PHONY: help


##
## Common commands
## ----------------------
empty-commit:
	git pull origin $(git rev-parse --abbrev-ref HEAD)
	git commit -m 'touch git' --allow-empty
	git push origin HEAD

.PHONY: empty-commit


##
## Docker commands
## ----------------------
up: ## Up
	${DOCKER_COMPOSE} up --build -d

down: ## Stop and remove
	${DOCKER_COMPOSE} down

restart: down up ## Restart

build: ## Build docker
	${DOCKER_COMPOSE} build

setup: ## Setup (init)
	cp docker-compose.override.yml.dist docker-compose.override.yml
	cp .php-cs-fixer.dist.php .php-cs-fixer.php

bash: ## Enter app container sh
	${CONTAINER_EXEC} sh

sh: bash ## Enter app container sh (alias)

logs: ## Show logs
	${DOCKER_COMPOSE} logs --tail 20 -f

ps: ## List running containers
	${DOCKER} ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.RunningFor}}\t{{.Status}}"

.PHONY: up down restart build setup bash sh logs ps


##
## Database commands
## ----------------------
db-create: ## Create db
	${CONSOLE_EXEC} doctrine:database:create

db-recreate: ## Recreate db
	${CONSOLE_EXEC} doctrine:database:drop --force
	${CONSOLE_EXEC} doctrine:database:create
	${CONSOLE_EXEC} doctrine:migrations:migrate --no-interaction
	${CONSOLE_EXEC} orm:generate-proxies

mig-diff: ## Run migrations:diff
	${CONSOLE_EXEC} orm:clear-cache:metadata
	${CONSOLE_EXEC} doctrine:migrations:diff --formatted
	${CONTAINER_EXEC} chown 1000:1000 -R src/App/Migrations/

mig-apply: ## Apply migrations
	${CONSOLE_EXEC} --no-interaction migrations:migrate

schema-validate:
	${CONSOLE_EXEC} doctrine:schema:validate

.PHONY: db-create db-recreate mig-diff mig-apply


##
## Composer commands
## ----------------------
composer-install: ## Install composer dependencies
	${COMPOSER_EXEC} install --no-interaction --prefer-dist --optimize-autoloader

composer-refresh-lock: ## Refresh composer.lock
	${COMPOSER_EXEC} update nothing

composer-validate: ## Analyze composer.json, composer.lock with internal Composer validator
	${COMPOSER_EXEC} validate --no-check-publish

composer-clear-cache: ## Clear composer cache
	${COMPOSER_EXEC} clear-cache

ci: composer-install ## Install composer dependencies (short alias)

crl: composer-refresh-lock ## Refresh composer.lock (short alias)

cv: composer-validate ## Analyze composer.json, composer.lock (short alias)

.PHONY: composer-install composer-refresh-lock composer-validate composer-clear-cache ci crl cv


##
## Code quality commands
## ----------------------
stan: ## Analyze code with phpstan
	${CONTAINER_EXEC} ./vendor/bin/phpstan clear-result-cache
	${CONTAINER_EXEC} php -d memory_limit=2G ./vendor/bin/phpstan analyse --memory-limit=2G

cs-fix-dry: ## Cs fix check
	${CONTAINER_EXEC} php -d memory_limit=2G ./vendor/bin/php-cs-fixer fix --dry-run --diff

cs-fix: ## Cs fix
	${CONTAINER_EXEC} php -d memory_limit=2G ./vendor/bin/php-cs-fixer fix --diff

csfix: cs-fix ## Cs fix (alias)
lint: stan cs-fix-dry ## Analyze code with phpstan (alias)

.PHONY: stan lint cs-fix-dry cs-fix
